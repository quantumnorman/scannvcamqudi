#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:

    apd_simple:
        module.Class: 'apd.apdcounterguisimple.CounterGui'
        connect:
            apd_logic: 'apd_logic'

    time_series:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    aom_control:
        module.Class: 'aom_control.aom_control_gui.AomControlGui'
        connect:
            aom_control_logic: 'aom_control_logic'


    task_runner_gui:
        module.Class: 'taskrunner.task_runner_gui.TaskRunnerGui'
        connect:
            task_runner: 'task_runner_logic'

    helmholtz_coil_gui:
        module.Class: 'helmholtz_coil.helmholtz_coil_gui.HelmholtzCoilGui'
        connect: 
            helmholtz_coil_logic: 'helmholtz_coil_logic'

    piezo_stepper_gui:
        module.Class: "piezo_stepper.piezo_stepper_gui.PiezoStepperGui"
        connect:
            piezo_stepper_logic : "piezo_stepper_logic"

    scanner_gui:
      module.Class: 'scanning.scannergui.ScannerGui'
      options:
          image_axes_padding: 0.02
          default_position_unit_prefix: null  # optional, use unit prefix characters, e.g., 'u' or 'n'
          optimizer_plot_dimensions: [2,1]
      connect:
          scanning_logic: scanning_probe_logic
          data_logic: scanning_data_logic
          optimize_logic: scanning_optimize_logic


logic:
    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 20  # optional (default: 20Hz)
            channel_buffer_size: 20  # optional (default: 1MSample)
            max_raw_data_bytes: 1073741824  # optional (default: 1GB)
            # apd_stream_ai : "PFI0"
        connect:
            streamer: ni_instreamer

    piezo_stepper_logic:
        module.Class: "piezo_stepper_logic.PiezoStepperLogic"
        connect:
            piezo_stepper: ANC300

    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

    task_runner_logic:
        module.Class: 'taskrunner.TaskRunnerLogic'
        options:
            module_tasks: {}

    helmholtz_coil_logic:
        module.Class: 'helmholtz_coil_logic.HelmholtzCoilLogic'
        connect:
            current_source: 'helmholtz_coil'
            relay_source: 'helmholtz_coil_relay'
        options:
            field_coeffs: {
            'X' : [1.36932, -0.0174511], ##slope, intercept
            'Y' : [2.13605, 0.0259495],
            'Z' : [1.24437, -0.0123547]
            }
            current_min: -3
            current_max: 3
            voltage_max: 3

    aom_control_logic:
        module.Class: 'aom_control_logic.AomControlLogic'
        options:
            # photodiode_channel: '/Dev3/ai0'
            # aom_channel: '/Dev3/ao3'
    #     Calibrated 21/04/2025 # 12/07/2023
            photodiode_factor: 377.25 # 200
            query_interval: 10
            ui_update_interval: 100
            aom_volt_range: [0, 2] # or 5 
        connect:
            nicard_aom_ao: 'nicard_aom_ao'
            photodiode_channel: "photodiode_channel"

    apd_logic:
        module.Class: 'apd_logic_simple.CountingLogic'
        options:
            max_frame_rate: 20  # optional (default: 20Hz)
            channel_buffer_size: 20  # optional (default: 1MSample)
            max_raw_data_bytes: 1073741824  # optional (default: 1GB)
            query_interval: 10
            ui_update_interval: 100
        connect:
            apd_channel: "apd_channel"


    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: ni_scanner

    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic


hardware:
    # instream_dummy:
    #     module.Class: 'dummy.data_instream_dummy.InStreamDummy'
    #     options:
    #         channel_names:
    #             - 'digital 1'
    #             - 'analog 1'
    #             - 'analog 2'
    #             - 'digital 2'
    #         channel_units:
    #             - 'Hz'
    #             - 'V'
    #             - 'V'
    #             - 'Hz'
    #         channel_signals:  # Can be 'counts' or 'sine'
    #             - 'counts'
    #             - 'sine'
    #             - 'sine'
    #             - 'counts'
    #         data_type: 'float64'
    #         sample_timing: 'CONSTANT'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'

    # nicard_6363_ao:
    #     module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
    #     options:
    #         device_name: 'Dev3'
    #         channels:
    #             ao0:
    #                 limits: [0, 5]
    #                 keep_value: True
    #             ao1:
    #                 limits: [-10.0, 10.0]
    #                 keep_value: True
    #             ao2:
    #                 limits: [-10.0, 10.0]
    #                 keep_value: True
    #             ao3:
    #                 limits: [-10.0, 10.0]
    #                 keep_value: True
    nicard_aom_ao:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'
            channels:
                ao0:
                    limits: [-1, 4]
                    keep_value: True

    apd_channel:
        module.Class: 'ni_x_series.apd_counter_simple.NIXSeriesAPDCounter'
        # options:
        #     device_name: 'Dev1'
        #     digital_channel_units:  # optional
        #         'PFI0': 'c/s'
        #     trigger_edge: RISING  # optional
        #     constraints:
        #         max_detectors : 1
        #         min_count_frequency : 1e-3
        #         max_count_frequency : 10e9
    # apd_channel:
    #     module.Class: 'dummy.apd_dummy.APDDummy'
    #     options:
    #         device_name: 'Dev3'
    #         digital_channel_units:  # optional
    #             'PFI0': 'c/s'
    #         max_channel_samples_buffer: 2  # optional, default 10000000
    #         read_write_timeout: 10  # optional, default 10
    #         trigger_edge: RISING  # optional
    #         constraints:
    #             max_detectors : 4
    #             min_count_frequency : 1e-3
    #             max_count_frequency : 10e9

    ANC300:
        module.Class: "attocube.ANC300.ANC300"
        options:
            inst_info:
                name: 'ANC300'
                address : 'COM3'
            # default_params:
            #         1 :
            #             'voltage': 25 #piezo amplitude in Volts
            #             'frequency' : 1000 #piezo frequency in Hz
            #         2 :
            #             'voltage' : 25,
            #             'frequency' : 1000
            #         3 : 
            #             'voltage' : 25,
            #             'frequency' : 1000
            # constraints:

        
    photodiode_channel:
        module.Class : 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        options:
            device_name: "Dev1"
            analog_sources: 
                - "ai1"
            max_channel_samples_buffer: 20
        

    # nicard_6363_instreamer:
    #     module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
    #     options:
    #         device_name: 'Dev3'
    #         analog_sources:  # optional
    #             - 'ai0'
    #             - 'ai1'
    #             - "ai2"
    #             - "ai3"
    #             - "ai4"
    #             - "ai5"
    #             - "ai6"
    #         max_channel_samples_buffer: 100

    # nicard_6363_instreamer2:
    #     module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
    #     options:
    #         device_name: "Dev3"
    #         analog_sources:
    #             - "ai0"
    #             - "ai1"
    #             - "ai2"
    #             - "ai3"
    #             - "ai4"
    #             - "ai5"
    #             - "ai6"
    #             - "ai7"

    # scanner_dummy:
    #     module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
    #     options:
    #         position_ranges:
    #             x: [0, 200e-6]
    #             y: [0, 200e-6]
    #             z: [-100e-6, 100e-6]
    #         frequency_ranges:
    #             x: [1, 5000]
    #             y: [1, 5000]
    #             z: [1, 1000]
    #         resolution_ranges:
    #             x: [1, 10000]
    #             y: [1, 10000]
    #             z: [2, 1000]
    #         position_accuracy:
    #             x: 10e-9
    #             y: 10e-9
    #             z: 50e-9
            # max_spot_number: 80e3 # optional
            # spot_density: 1e5 # optional
            # spot_view_distance_factor: 2 # optional
            # spot_size_dist: [400e-9, 100e-9] # optional
            # spot_amplitude_dist: [2e5, 4e4] # optional
            # require_square_pixels: False # optional
            # back_scan_available: True # optional
            # back_scan_frequency_configurable: True # optional
            # back_scan_resolution_configurable: True # optional
            # image_generation_max_calculations: 100e6 # optional
            # image_generation_chunk_size: 1000 # optional

    # finite_sampling_input_dummy:
    #     module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
    #     options:
    #         simulation_mode: 'ODMR'
    #         sample_rate_limits: [1, 1e6]
    #         frame_size_limits: [1, 1e9]
    #         channel_units:
    #             'APD counts': 'c/s'
    #             'Photodiode': 'V'

    # finite_sampling_output_dummy:
    #     module.Class: 'dummy.finite_sampling_output_dummy.FiniteSamplingOutputDummy'
    #     options:
    #         sample_rate_limits: [1, 1e6]
    #         frame_size_limits: [1, 1e9]
    #         output_mode: 'JUMP_LIST'
    #         channel_units:
    #             'Frequency': 'Hz'
    #             'Voltage': 'V'

    # finite_sampling_io_dummy:
    #     module.Class: 'dummy.finite_sampling_io_dummy.FiniteSamplingIODummy'
    #     options:
    #         sample_rate_limits: [1, 1e6]
    #         frame_size_limits: [1, 1e9]
    #         default_output_mode: 'JUMP_LIST'
    #         input_channel_units:
    #             'APD counts': 'c/s'
    #             'Photodiode': 'V'
    #         output_channel_units:
    #             'Frequency': 'Hz'
    #             'Voltage': 'V'

    # camera_dummy:
    #     module.Class: 'dummy.camera_dummy.CameraDummy'

    # laser_dummy:
    #     module.Class: 'dummy.simple_laser_dummy.SimpleLaserDummy'

    # microwave_dummy:
    #     module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    # switch_interfuse:
    #     module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
    #     options:
    #         extend_hardware_name: True
    #     connect:
    #         switch1: 'switch1_dummy'
    #         switch2: 'process_control_dummy'


    # switch1_dummy:
    #     module.Class: 'dummy.switch_dummy.SwitchDummy'
    #     options:
    #         name: 'First'  # optional
    #         remember_states: True  # optional
    #         switches:
    #             one: ['down', 'up']
    #             two: ['down', 'up']
    #             three: ['low', 'middle', 'high']

    # fast_counter_dummy:
    #     module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
    #     options:
    #         gated: False

    # pulser_dummy:
    #     module.Class: 'dummy.pulser_dummy.PulserDummy'
    #     options:
    #         force_sequence_option: False

    # spectrometer_dummy:
    #     module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'

    # process_control_dummy:
    #     module.Class: 'dummy.process_control_dummy.ProcessControlDummy'
    #     options:
    #         process_value_channels:
    #             Temperature:
    #                 unit: 'K'
    #                 limits: [0, .inf]
    #                 dtype: float
    #             Voltage:
    #                 unit: 'V'
    #                 limits: [-10.0, 10.0]
    #                 dtype: float
    #         setpoint_channels:
    #             Current:
    #                 unit: 'A'
    #                 limits: [-5, 5]
    #                 dtype: float
    #             Frequency:
    #                 unit: 'Hz'
    #                 limits: [100.0e3, 20.0e9]
    #                 dtype: float
    #         linear_dependency:
    #             process_value_channel: 'Temperature'
    #             setpoint_channel: 'Current'
    #             slope: 10
    #             offset: 100
    #             noise: 0.1

    # helmholtz_coil:
    #     module.Class: 'helmholtz_coil.helmholtzcoil.HelmholtzCoil'
    #     options:
    #         address: "COM1"

    # helmholtz_coil_relay:
    #     module.Class: 'helmholtz_coil.helmholtzcoilrelay.HelmholtzCoilRelay'
    #     options:
    #         relay_address: "COM4"
    #         relay_pinouts: [7,8,9,10,11,12]


    
    # helmholtz_coil:
    #     module.Class: 'dummy.helmholtz_coil_dummy.HelmholtzCoil'
    #     options:
    #         address: "COM1"

    # helmholtz_coil_relay:
    #     module.Class: 'dummy.helmholtz_coil_relay_dummy.HelmholtzCoilRelay'
    #     options:
    #         relay_address: "COM4"
    #         relay_pinouts: [7,8,9,10,11,12]

    ni_scanner:
        module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuse'
        connect:
            scan_hardware: 'ni_io'
            analog_output: 'ni_ao'
        options:
            ni_channel_mapping:
                x: 'ao2'
                y: 'ao3'
                # z: 'ao2'
                # a: 'ao3'
                fluorescence: 'PFI0'
                # APD2: 'PFI9'
                # AI0: 'ai0'
                # APD3: 'PFI10'
            position_ranges:  # in m
                x: [0, 200e-6]
                y: [0, 200e-6]
                # z: [-100e-6, 100e-6]
            frequency_ranges:
                x: [1, 5000]
                y: [1, 5000]
                # z: [1, 1000]
            resolution_ranges:
                x: [1, 10000]
                y: [1, 10000]
                # z: [1, 10000]
            input_channel_units:
                fluorescence: 'c/s'
                # AI0: 'V'
                # APD2: 'c/s'
                # APD3: 'c/s'
            backwards_line_resolution: 50  # optional
            maximum_move_velocity: 400e-6  # m/s


    ni_io:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_io.NIXSeriesFiniteSamplingIO'
        options:
            device_name: 'Dev1'
            input_channel_units:  # optional
                PFI0: 'c/s'
                # PFI9: 'c/s'
                # PFI10: 'c/s'
                # ai2: 'V'
                # ai3: 'V'
            output_channel_units:
                # 'ao0': 'V'
                'ao2': 'V'
                'ao3': 'V'
            # adc_voltage_ranges:
            #     ai2: [-10, 10]  # optional
            #     ai3: [-10, 10]  # optional
            output_voltage_ranges:
                # ao0: [-2., 10.]
                ao2: [-2., 5.]
                ao3: [-2., 5.]
            frame_size_limits: [1, 1e9]  # optional
            output_mode: 'JUMP_LIST'  # must be a name of SamplingOutputMode
            read_write_timeout: 10  # optional
            # sample_clock_output: '/Dev1/PFI11'  # optional

    ni_ao:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'
            channels:
                # ao0:
                #     limits: [-10.0, 10.0]
                #     keep_value: True
                # ao1:
                #     limits: [-10.0, 10.0]
                #     keep_value: True
                ao2:
                    limits: [-2.0, 9.0]
                    keep_value: True
                ao3:
                    limits: [-2.0, 8.0]
                    keep_value: True

    # # Optional, for slow counter / timer series reader
    # ni_instreamer:
    #     module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
    #     options:
    #         device_name: 'Dev1'
    #         digital_sources:  # optional
    #             - 'PFI0'
    #         # analog_sources:  # optional
    #         #   - 'ai0'
    #         #   - 'ai1'
    #         # external_sample_clock_source: 'PFI0'  # optional
    #         # external_sample_clock_frequency: 1000  # optional
    #         # adc_voltage_range: [-10, 10]  # optional
    #         # max_channel_samples_buffer: 10000000  # optional
    #         # read_write_timeout: 10  # optional